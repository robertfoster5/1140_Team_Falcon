import unittest
from main import ctc_qtui_test

class Testing(unittest.TestCase):
    def test_calculate_train_metrics_authority(self):
        
        test_block_info = [ # block length (m), block speed limit (km/hr), next-block-index (-1 if none),bidirectional-block-index (-1 if none), switch-neighbor-index (-1 if none)
         [100,55,12,-1,-1], # Section A (Unidirectional)
         [100,55,0,-1,-1],
         [100,55,1,-1,-1],
         [100,55,2,-1,-1], # Section B (Unidirectional)
         [100,55,3,-1,-1],
         [100,55,4,-1,-1],
         [100,55,5,-1,-1], # Section C (Unidirectional)
         [100,55,6,-1,-1],
         [100,55,7,-1,-1],
         [100,55,8,-1,-1],
         [100,55,9,-1,-1],
         [100,55,10,-1,-1],
         [150,70,11,13,-1], # Section D (Bidirectional)
         [150,70,12,14,-1],
         [150,70,13,15,-1],
         [150,70,14,16,-1],
         [150,60,15,17,-1], # Section E (Bidirectional)
         [150,60,16,18,-1],
         [150,60,17,19,-1],
         [150,60,18,20,-1],
         [300,70,19,21,-1], # Section F (Bidirectional)
         [300,70,20,22,-1],
         [300,70,21,23,-1],
         [300,70,22,24,-1],
         [200,70,23,25,-1],
         [100,70,24,26,-1],
         [50,70,25,27,-1],
         [50,70,26,28,-1],
         [50,70,29,-1,-1], # Section G (Unidirectional)
         [50,70,30,-1,-1],
         [50,70,31,-1,-1],
         [50,70,32,-1,-1],
         [50,70,33,-1,-1], # Section H (Unidirectional)
         [50,70,34,-1,-1],
         [50,70,35,-1,-1],
         [50,70,36,-1,-1], # Section I (Unidirectional)
         [50,70,37,-1,-1],
         [50,70,38,-1,-1],
         [50,70,39,-1,-1],
         [50,70,40,-1,-1],
         [50,70,41,-1,-1],
         [50,70,42,-1,-1],
         [50,70,43,-1,-1],
         [50,70,44,-1,-1],
         [50,70,45,-1,-1],
         [50,70,46,-1,-1],
         [50,70,47,-1,-1],
         [50,70,48,-1,-1],
         [50,70,49,-1,-1],
         [50,70,50,-1,-1],
         [50,70,51,-1,-1],
         [50,70,52,-1,-1],
         [50,70,53,-1,-1],
         [50,70,54,-1,-1],
         [50,70,55,-1,-1],
         [50,70,56,-1,-1],
         [50,70,57,-1,-1],
         [50,60,58,-1,150], # Section J (Unidirectional)
         [50,60,59,-1,-1],
         [50,60,60,-1,-1],
         [50,60,61,-1,-1],
         [50,60,62,-1,-1],
         [100,70,63,-1,-1], # Section K (Unidirectional)
         [100,70,64,-1,-1], 
         [200,70,65,-1,-1], 
         [200,70,66,-1,-1], 
         [100,70,67,-1,-1], 
         [100,70,68,-1,-1], 
         [100,60,69,-1,-1], # Section L (Unidirectional) 
         [100,60,70,-1,-1], 
         [100,60,71,-1,-1], 
         [100,60,72,-1,-1], 
         [100,60,73,-1,-1],
         [100,60,74,-1,-1], # Section M (Unidirectional)
         [100,60,75,-1,-1],
         [100,60,76,-1,-1],
         [300,70,100,77,-1], # Section N (Bidirectional)
         [300,70,76,78,-1],
         [300,70,77,79,-1],
         [300,70,78,80,-1],
         [300,70,79,81,-1],
         [300,70,80,82,-1],
         [300,70,81,83,-1],
         [300,70,82,84,-1],
         [300,70,83,85,-1],
         [100,55,86,-1,-1], # Section O (Unidirectional)
         [86.6,55,87,-1,-1],
         [100,55,88,-1,-1],
         [75,55,89,-1,-1], # Section P (Unidirectional)
         [75,55,90,-1,-1],
         [75,55,91,-1,-1],
         [75,55,92,-1,-1],
         [75,55,93,-1,-1],
         [75,55,94,-1,-1],
         [75,55,95,-1,-1],
         [75,55,96,-1,-1],
         [75,55,97,-1,-1],
         [75,55,98,-1,-1], # Section Q (Unidirectional)
         [75,55,99,-1,-1],
         [75,55,84,-1,-1],
         [35,55,101,-1,-1], # Section R (Unidirectional)
         [100,60,102,-1,-1], # Section S (Unidirectional)
         [100,60,103,-1,-1],
         [80,60,104,-1,-1],
         [100,60,105,-1,-1], # Section T (Unidirectional)
         [100,60,106,-1,-1],
         [90,60,107,-1,-1],
         [100,60,108,-1,-1],
         [100,60,109,-1,-1],
         [100,70,110,-1,-1], # Section U (Unidirectional)
         [100,70,111,-1,-1],
         [100,70,112,-1,-1],
         [100,70,113,-1,-1],
         [162,70,114,-1,-1],
         [100,70,115,-1,-1],
         [100,70,116,-1,-1],
         [50,60,117,-1,-1], # Section V (Unidirectional)
         [50,60,118,-1,-1],
         [40,60,119,-1,-1],
         [50,60,120,-1,-1],
         [50,60,121,-1,-1],
         [50,70,122,-1,-1], # Section W (Unidirectional)
         [50,70,123,-1,-1],
         [50,70,124,-1,-1],
         [50,70,125,-1,-1],
         [50,70,126,-1,-1],
         [50,70,127,-1,-1],
         [50,70,128,-1,-1],
         [50,70,129,-1,-1],
         [50,70,130,-1,-1],
         [50,70,131,-1,-1],
         [50,70,132,-1,-1],
         [50,70,133,-1,-1],
         [50,70,134,-1,-1],
         [50,70,135,-1,-1],
         [50,70,136,-1,-1],
         [50,70,137,-1,-1],
         [50,70,138,-1,-1],
         [50,70,139,-1,-1],
         [50,70,140,-1,-1],
         [50,70,141,-1,-1],
         [50,70,142,-1,-1],
         [50,70,143,-1,-1],
         [50,70,144,-1,-1], # Section X (Unidirectional)
         [50,70,145,-1,-1],
         [50,70,146,-1,-1],
         [50,70,147,-1,-1], # Section Y (Unidirectional)
         [184,70,148,-1,-1],
         [40,70,149,-1,-1],
         [35,70,27,-1,-1], # Section Z (Unidirectional)
         [300,70,61,-1,-1] # Yard (Unidirectional)
        ]
        test_station_info = [
         [1], # Pioneer
         [8], # Edgebrook
         [15], # Station X
         [21], # Whited
         [30], # South Bank
         [38,140], # Central
         [47,131], # Inglewood
         [56,122], # Overbrook
         [150], # Yard
         [64,113], # Glenbury
         [72,104], # Dormont
         [76], # Mt Lebanon
         [87], # Poplar
         [95], # Castle Shannon
        ] # Station-index Block-index position
        
        train = 0
        destination_station = 10 # Dormont
        arrival_time = 180
        current_time = 10
        
        train_metrics = ctc_qtui_test.calculate_train_metrics(test_block_info,test_station_info,train,destination_station,arrival_time,current_time)
        
        expected_authority = [150,61,62,63,64,65,66,67,68,69,70,71,72]
        self.assertEqual(train_metrics[0], expected_authority)

    def test_calculate_train_metrics_suggested_speed(self):
        
        test_block_info = [ # block length (m), block speed limit (km/hr), next-block-index (-1 if none),bidirectional-block-index (-1 if none), switch-neighbor-index (-1 if none)
         [100,55,12,-1,-1], # Section A (Unidirectional)
         [100,55,0,-1,-1],
         [100,55,1,-1,-1],
         [100,55,2,-1,-1], # Section B (Unidirectional)
         [100,55,3,-1,-1],
         [100,55,4,-1,-1],
         [100,55,5,-1,-1], # Section C (Unidirectional)
         [100,55,6,-1,-1],
         [100,55,7,-1,-1],
         [100,55,8,-1,-1],
         [100,55,9,-1,-1],
         [100,55,10,-1,-1],
         [150,70,11,13,-1], # Section D (Bidirectional)
         [150,70,12,14,-1],
         [150,70,13,15,-1],
         [150,70,14,16,-1],
         [150,60,15,17,-1], # Section E (Bidirectional)
         [150,60,16,18,-1],
         [150,60,17,19,-1],
         [150,60,18,20,-1],
         [300,70,19,21,-1], # Section F (Bidirectional)
         [300,70,20,22,-1],
         [300,70,21,23,-1],
         [300,70,22,24,-1],
         [200,70,23,25,-1],
         [100,70,24,26,-1],
         [50,70,25,27,-1],
         [50,70,26,28,-1],
         [50,70,29,-1,-1], # Section G (Unidirectional)
         [50,70,30,-1,-1],
         [50,70,31,-1,-1],
         [50,70,32,-1,-1],
         [50,70,33,-1,-1], # Section H (Unidirectional)
         [50,70,34,-1,-1],
         [50,70,35,-1,-1],
         [50,70,36,-1,-1], # Section I (Unidirectional)
         [50,70,37,-1,-1],
         [50,70,38,-1,-1],
         [50,70,39,-1,-1],
         [50,70,40,-1,-1],
         [50,70,41,-1,-1],
         [50,70,42,-1,-1],
         [50,70,43,-1,-1],
         [50,70,44,-1,-1],
         [50,70,45,-1,-1],
         [50,70,46,-1,-1],
         [50,70,47,-1,-1],
         [50,70,48,-1,-1],
         [50,70,49,-1,-1],
         [50,70,50,-1,-1],
         [50,70,51,-1,-1],
         [50,70,52,-1,-1],
         [50,70,53,-1,-1],
         [50,70,54,-1,-1],
         [50,70,55,-1,-1],
         [50,70,56,-1,-1],
         [50,70,57,-1,-1],
         [50,60,58,-1,150], # Section J (Unidirectional)
         [50,60,59,-1,-1],
         [50,60,60,-1,-1],
         [50,60,61,-1,-1],
         [50,60,62,-1,-1],
         [100,70,63,-1,-1], # Section K (Unidirectional)
         [100,70,64,-1,-1], 
         [200,70,65,-1,-1], 
         [200,70,66,-1,-1], 
         [100,70,67,-1,-1], 
         [100,70,68,-1,-1], 
         [100,60,69,-1,-1], # Section L (Unidirectional) 
         [100,60,70,-1,-1], 
         [100,60,71,-1,-1], 
         [100,60,72,-1,-1], 
         [100,60,73,-1,-1],
         [100,60,74,-1,-1], # Section M (Unidirectional)
         [100,60,75,-1,-1],
         [100,60,76,-1,-1],
         [300,70,100,77,-1], # Section N (Bidirectional)
         [300,70,76,78,-1],
         [300,70,77,79,-1],
         [300,70,78,80,-1],
         [300,70,79,81,-1],
         [300,70,80,82,-1],
         [300,70,81,83,-1],
         [300,70,82,84,-1],
         [300,70,83,85,-1],
         [100,55,86,-1,-1], # Section O (Unidirectional)
         [86.6,55,87,-1,-1],
         [100,55,88,-1,-1],
         [75,55,89,-1,-1], # Section P (Unidirectional)
         [75,55,90,-1,-1],
         [75,55,91,-1,-1],
         [75,55,92,-1,-1],
         [75,55,93,-1,-1],
         [75,55,94,-1,-1],
         [75,55,95,-1,-1],
         [75,55,96,-1,-1],
         [75,55,97,-1,-1],
         [75,55,98,-1,-1], # Section Q (Unidirectional)
         [75,55,99,-1,-1],
         [75,55,84,-1,-1],
         [35,55,101,-1,-1], # Section R (Unidirectional)
         [100,60,102,-1,-1], # Section S (Unidirectional)
         [100,60,103,-1,-1],
         [80,60,104,-1,-1],
         [100,60,105,-1,-1], # Section T (Unidirectional)
         [100,60,106,-1,-1],
         [90,60,107,-1,-1],
         [100,60,108,-1,-1],
         [100,60,109,-1,-1],
         [100,70,110,-1,-1], # Section U (Unidirectional)
         [100,70,111,-1,-1],
         [100,70,112,-1,-1],
         [100,70,113,-1,-1],
         [162,70,114,-1,-1],
         [100,70,115,-1,-1],
         [100,70,116,-1,-1],
         [50,60,117,-1,-1], # Section V (Unidirectional)
         [50,60,118,-1,-1],
         [40,60,119,-1,-1],
         [50,60,120,-1,-1],
         [50,60,121,-1,-1],
         [50,70,122,-1,-1], # Section W (Unidirectional)
         [50,70,123,-1,-1],
         [50,70,124,-1,-1],
         [50,70,125,-1,-1],
         [50,70,126,-1,-1],
         [50,70,127,-1,-1],
         [50,70,128,-1,-1],
         [50,70,129,-1,-1],
         [50,70,130,-1,-1],
         [50,70,131,-1,-1],
         [50,70,132,-1,-1],
         [50,70,133,-1,-1],
         [50,70,134,-1,-1],
         [50,70,135,-1,-1],
         [50,70,136,-1,-1],
         [50,70,137,-1,-1],
         [50,70,138,-1,-1],
         [50,70,139,-1,-1],
         [50,70,140,-1,-1],
         [50,70,141,-1,-1],
         [50,70,142,-1,-1],
         [50,70,143,-1,-1],
         [50,70,144,-1,-1], # Section X (Unidirectional)
         [50,70,145,-1,-1],
         [50,70,146,-1,-1],
         [50,70,147,-1,-1], # Section Y (Unidirectional)
         [184,70,148,-1,-1],
         [40,70,149,-1,-1],
         [35,70,27,-1,-1], # Section Z (Unidirectional)
         [300,70,61,-1,-1] # Yard (Unidirectional)
        ]
        test_station_info = [
         [1], # Pioneer
         [8], # Edgebrook
         [15], # Station X
         [21], # Whited
         [30], # South Bank
         [38,140], # Central
         [47,131], # Inglewood
         [56,122], # Overbrook
         [150], # Yard
         [64,113], # Glenbury
         [72,104], # Dormont
         [76], # Mt Lebanon
         [87], # Poplar
         [95], # Castle Shannon
        ] # Station-index Block-index position
        
        train = 0
        destination_station = 10 # Dormont
        arrival_time = 180
        current_time = 10
        
        train_metrics = ctc_qtui_test.calculate_train_metrics(test_block_info,test_station_info,train,destination_station,arrival_time,current_time)
        
        expected_sugg_speed = [13,13,13,13,13,13,13,13,13,13,13,13,13]
        self.assertEqual(train_metrics[1], expected_sugg_speed)

if __name__ == '__main__':
    unittest.main()
